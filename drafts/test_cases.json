[["TD_COAP_CORE_01", "Perform GET transaction (CON mode)", "class TD_COAP_CORE_01 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_01\nObjective:\nPerform GET transaction (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.8.1,1.2,2.1,2.2,3.1\n\nPre-test\nconditions:\n\u2022\tServer offers the resource /test with resource content is not empty that handles GET with an arbitrary payload\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a GET request with:\n\u2022\tType = 0(CON)\n\u2022\tCode = 1(GET)\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType=0 and Code=1\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tUri-Path option \"test\"\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 69(2.05 Content)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tContent-format option\n\u2022\tNon-empty Paload\n\n4\nVerify\nClient displays the received information\n    \"\"\"\n\n    def run (self):\n        self.match_coap (\"client\", CoAP (type=\"con\", code=\"get\",\n                        opt = self.uri (\"/test\")))\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next()\n\n        if self.match_coap (\"server\", CoAP (\n                        code = 2.05,\n                        mid = CMID,\n                        tok =CTOK,\n                        pl = Not(b\"\"),\n                    )):\n            self.match_coap (\"server\", CoAP (\n                        opt = Opt (CoAPOptionContentFormat()),\n                    ), \"fail\")\n"], ["TD_COAP_CORE_02", "Perform DELETE transaction (CON mode)", "class TD_COAP_CORE_02 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_02\nObjective:\nPerform DELETE transaction (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.8.4,1.2,2.1,2.2,3.1\n\nPre-test\nconditions:\n\u2022\tServer offers a /test resource that handles DELETE\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a DELETE request with:\n\u2022\tType = 0(CON)\n\u2022\tCode = 4(DELETE)\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType=0 and Code=4\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tUri-Path option \"test\"\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 66(2.02 Deleted)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tContent-format option if payload non-empty\n\u2022\tEmpty or non-empty Payload\n\n4\nVerify\nClient displays the received information\n\"\"\"\n"], ["TD_COAP_CORE_03", "Perform PUT transaction (CON mode)", "class TD_COAP_CORE_03 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_03\nObjective:\nPerform PUT transaction (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.8.3,1.2,2.1,2.2,3.1\n\nPre-test\nconditions:\n\u2022\tServer offers already available resource /test  or accepts creation of new resource on /test  that handles PUT\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a PUT request with:\n\u2022\tType = 0(CON)\n\u2022\tCode = 3(PUT)\n\u2022\tContent-format  option\n\u2022\tEmpty or non-empty Payload\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType=0 and Code=3\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tUri-Path option \"test\"\n\n3\nVerify\nServer displays received information\n\n4\nCheck\nServer sends response containing:\n\u2022\tCode = 68 (2.04 Changed) or 65 (2.01 Created)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tContent-format option if payload non-empty\n\u2022\tEmpty or non-empty Payload\n\n5\nVerify\nClient displays the received response\n\"\"\"\n    def run (self):\n        self.match_coap (\"client\", CoAP (type=\"con\", code=\"put\",\n                        opt=self.uri (\"/test\")))\n        self.match_coap (\"client\", CoAP (\n                        opt = Opt (CoAPOptionContentFormat()),\n                ), \"fail\")\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n        self.next()\n\n        self.match_coap (\"server\", CoAP (\n                        code = Any (65, 68),\n                        mid = CMID,\n                        tok = CTOK,\n                ))\n        if self.match_coap (\"server\", CoAP(pl = Not(b\"\")),None):\n            self.match_coap (\"server\", CoAP (\n                        opt = Opt (CoAPOptionContentFormat()),\n                ), \"fail\")\n"], ["TD_COAP_CORE_04", "Perform POST transaction (CON mode)", "class TD_COAP_CORE_04 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_04\nObjective:\nPerform POST transaction (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.8.2,1.2,2.1,2.2,3.1\n\nPre-test\nconditions:\n\u2022\tServer accepts creation of new resource on / test (resource does not exist yet)\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a POST request with:\n\u2022\tType = 0(CON)\n\u2022\tCode = 2(POST)\n\u2022\tContent format  option\n\u2022\tEmpty or non-empty Payload\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType=0 and Code=2\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tUri-Path option \"test\"\n\n3\nVerify\nServer displays received information\n\n4\nCheck\nServer sends response containing:\n\u2022\tCode = 65(2.01 Created)  or 68 (2.04 changed)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tContent-format option if payload non-empty\n\u2022\tZero or more Location-path options\n\u2022\tEmpty or non-empty Payload\n\n5\nVerify\nClient displays the received response\n\"\"\"\n    def run (self):\n        self.match_coap (\"client\", CoAP (type=\"con\", code=\"post\",\n                        opt=self.uri (\"/test\")))\n        self.match_coap (\"client\", CoAP (\n                        opt = Opt (CoAPOptionContentFormat()),\n                ), \"fail\")\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next()\n\n        self.match_coap (\"server\", CoAP (\n                        code = Any (65, 68),\n                        mid = CMID,\n                        tok = CTOK,\n                ))\n        if self.match_coap (\"server\", CoAP(pl = Not(b\"\")),None):\n            self.match_coap (\"server\", CoAP (\n                        opt = Opt (CoAPOptionContentFormat()),\n                ), \"fail\")\n"], ["TD_COAP_CORE_05", "Perform GET transaction (NON mode)", "class TD_COAP_CORE_05 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_05\nObjective:\nPerform GET transaction (NON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP]  5.8.1, 5.2.3\n\nPre-test\nconditions:\n\u2022\tServer offers a /test resource with resource content is not empty that handles GET\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a GET request with:\n\u2022\tType = 1(NON)\n\u2022\tCode = 1(GET)\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType=1 and Code=1\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tUri-Path option \"test\"\n\n3\nCheck\nServer sends response containing:\n\u2022\tType = 1(NON)\n\u2022\tCode= 69(2.05 Content)\n\u2022\tServer-generated Message ID (\u2794 SMID)\n\u2022\tToken = CTOK\n\u2022\tContent-format option\n\n4\nVerify\nClient displays the received information\n\"\"\"\n    def run (self):\n        self.match_coap (\"client\", CoAP (type=\"non\", code=\"get\",\n                        opt = self.uri (\"/test\")))\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next()\n\n        if self.match_coap (\"server\", CoAP (\n                        type = \"non\",\n                        code = 2.05,\n                        tok = CTOK,\n                )):\n            self.match_coap (\"server\", CoAP (\n                        opt = Opt (CoAPOptionContentFormat())\n                ), \"fail\")\n"], ["TD_COAP_CORE_06", "Perform DELETE transaction (NON mode)", "class TD_COAP_CORE_06 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_06\nObjective:\nPerform DELETE transaction (NON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP]  5.8.4,5.2.3\n\nPre-test\nconditions:\n\u2022\tServer offers a /test resource that handles DELETE\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a DELETE request with:\n\u2022\tType = 1(NON)\n\u2022\tCode = 4(DELETE)\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType=1 and Code=4\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tUri-Path option \"test\"\n\n3\nCheck\nServer sends response containing:\n\u2022\tType = 1(NON)\n\u2022\tCode = 66(2.02 Deleted)\n\u2022\tServer-generated Message ID (\u2794 SMID)\n\u2022\tToken = CTOK\n\u2022\tContent-format option if payload non-empty\n\u2022\tEmpty or non-empty Payload\n\n4\nVerify\nClient displays the received information\n\"\"\"\n    def run (self):\n        self.match_coap (\"client\", CoAP (type=\"non\", code=\"delete\",\n                        opt = self.uri (\"/test\")))\n\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next()\n\n        self.match_coap (\"server\", CoAP (type=\"non\", code = 2.02,tok=CTOK))\n        if self.match_coap (\"server\", CoAP(pl = Not(b\"\")),None):\n            self.match_coap (\"server\", CoAP (\n                        opt = Opt (CoAPOptionContentFormat()),\n                ), \"fail\")\n"], ["TD_COAP_CORE_07", "Perform PUT transaction (NON mode)", "class TD_COAP_CORE_07 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_07\nObjective:\nPerform PUT transaction (NON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.8.3, 5.2.3\n\nPre-test\nconditions:\n\u2022\tServer offers a /test resource that handles PUT\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a PUT request with:\n\u2022\tType = 1(NON)\n\u2022\tCode = 3(PUT)\n\u2022\tAn arbitrary payload\n\u2022\tContent-format option\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType=1 and Code=3\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tUri-Path option \"test\"\n\n3\nVerify\nServer displays the received information\n\n4\nCheck\nServer sends response containing:\n\u2022\tType = 1(NON)\n\u2022\tCode = 68 (2.04 Changed) or 65 (2.01 Created)\n\u2022\tServer-generated Message ID (\u2794 SMID)\n\u2022\tToken = CTOK\n\u2022\tContent-format option if payload non-empty\n\u2022\tEmpty or non-empty Payload\n\n5\nVerify\nClient displays the received response\n\"\"\"\n    def run (self):\n        self.match_coap (\"client\", CoAP (type=\"non\", code=\"put\",\n                        opt = self.uri (\"/test\")))\n        self.match_coap (\"client\", CoAP (\n                        pl  = Not (b''),\n                        opt = Opt (CoAPOptionContentFormat()),\n                ), \"fail\")\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next()\n\n        self.match_coap (\"server\", CoAP (\n                        type = \"non\",\n                        code = Any (65, 68),\n                        tok = CTOK,\n                ))\n        if self.match_coap (\"server\", CoAP(pl = Not(b\"\")),None):\n            self.match_coap (\"server\", CoAP (\n                        opt = Opt (CoAPOptionContentFormat()),\n                ), \"fail\")\n"], ["TD_COAP_CORE_08", "Perform POST transaction (NON mode)", "class TD_COAP_CORE_08 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_08\nObjective:\nPerform POST transaction (NON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.8.2,5.2.3\n\nPre-test\nconditions:\n\u2022\tServer accepts POST request on /test\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a POST request with:\n\u2022\tType = 1(NON)\n\u2022\tCode = 2(POST)\n\u2022\tAn arbitrary payload\n\u2022\tContent format option\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType=1 and Code=2\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tUri-Path option \"test\"\n\n3\nVerify\nServer displays the received information\n\n4\nCheck\nServer sends response containing:\n\u2022\tType = 1(NON)\n\u2022\tCode = 65(2.01 Created) or 68 (2.04 changed)\n\u2022\tServer-generated Message ID (\u2794 SMID)\n\u2022\tToken = CTOK\n\u2022\tZero or more Location-path options\n\u2022\tContent-format option if payload non-empty\n\u2022\tEmpty or non-empty Payload\n\n5\nVerify\nClient displays the received response\n\"\"\"\n    def run (self):\n        self.match_coap (\"client\", CoAP (type=\"non\", code=\"post\",\n                        opt = self.uri (\"/test\")))\n        self.match_coap (\"client\", CoAP (\n                        pl  = Not (b''),\n                        opt = Opt (CoAPOptionContentFormat()),\n                ), \"fail\")\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next()\n\n        self.match_coap (\"server\", CoAP (\n                        type = \"non\",\n                        code = Any (65, 68),\n                        tok = CTOK,\n                ))\n        if self.match_coap (\"server\", CoAP(pl = Not(b\"\")),None):\n            self.match_coap (\"server\", CoAP (\n                        opt = Opt (CoAPOptionContentFormat()),\n                ), \"fail\")\n"], ["TD_COAP_CORE_09", "Perform GET transaction with separate response (CON mode, no piggyback)", "class TD_COAP_CORE_09 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_09\nObjective:\nPerform GET transaction with separate response (CON mode, no piggyback)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] clause  5.8.1,5.2.2\n\nPre-test\nconditions:\n\u2022\t Server offers a resource /separate which is not served immediately and which therefore is not acknowledged in a piggybacked way.\ncannot be acknowledged in a piggybacked way.\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a confirmable GET request to server\u2019s resource\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tUri-Path option \"separate\"\n\u2022\tClient-generated Token (\u2794 CTOK)\n\n\n3\nCheck\nServer sends response containing:\n\u2022\tType = 2 (ACK)\n\u2022\tCode = 0\n\u2022\tMessage ID = CMID\n\u2022\tempty Payload\n\n4\nCheck\nServer sends response containing:\n\u2022\tType  = 0 (CON)\n\u2022\tCode = 69 (2.05 content)\n\u2022\tServer-generated Message ID (\u2794 SMID)\n\u2022\tToken = CTOK\n\u2022\tContent-format option\n\u2022\tNon-empty Payload\n\n5\nCheck\nClient sends response containing:\n\u2022\tType = 2 (ACK)\n\u2022\tCode = 0\n\u2022\tMessage ID = SMID\n\u2022\tempty Payload\n\n6\nVerify\nClient displays the response\nNote: Steps 3 and 4 may occur out-of-order\n\"\"\"\n    def run (self):\n        self.match_coap (\"client\", CoAP (type=\"con\", code = \"get\",\n                        opt = self.uri (\"/separate\")))\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next()\n\n        #FIXME: may be out-of-order\n        if not self.match_coap\t(\"server\", CoAP (type=\"ack\", code=0, mid=CMID, pl = b\"\")):\n            raise self.Stop()\n\n        self.next()\n\n         # FIXME: this is in a different conversation\n        self.match_coap (\"server\", CoAP (type=\"con\", code=2.05))\n        self.match_coap (\"server\", CoAP (\n                        tok=CTOK,\n                        pl = Not (b''),\n                        opt= Opt(CoAPOptionContentFormat())\n                ), \"fail\")\n        SMID = self.frame.coap[\"mid\"]\n\n        self.next()\n\n        self.match_coap (\"client\", CoAP (type=\"ack\", code=0, mid=SMID,pl=b\"\"))\n"], ["TD_COAP_CORE_10", "Perform GET transaction containing non-empty Token (CON mode)", "class TD_COAP_CORE_10 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_10\nObjective:\nPerform GET transaction containing non-empty Token (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] clause 2.2 ,5.8.1, 5.10.1\n\nPre-test\nconditions:\n\u2022\tServer offers a /test resource with resource content is not empty that handles GET\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a GET request to server\u2019s resource including Token option\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tOption Type = Token\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tLength of the token should be between 1 to 8 Bytes\n\u2022\tUri-Path option \"test\"\n\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tContent-format option\n\u2022\tNon-empty Payload\n\n4\nVerify\nClient displays the response\n\"\"\"\n    def run (self):\n        self.match_coap (\"client\", CoAP (\tcode = \"get\",\n                            type = \"con\",\n                            tok = Not (b\"\"),\n                            opt = self.uri (\"/test\")\n        ))\n        self.match_coap (\"client\", CoAP (tok = Length (bytes, (1, 8))\n                ), \"fail\")\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next()\n\n        if self.match_coap (\"server\", CoAP (\tcode = 2.05,\n                            pl  = Not (b\"\")\n                )):\n            self.match_coap (\"server\", CoAP (mid= CMID,tok = CTOK,opt= Opt(CoAPOptionContentFormat())), \"fail\")\n"], ["TD_COAP_CORE_11", "Perform GET transaction containing non-empty Token with a separate response (CON mode)", "class TD_COAP_CORE_11 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_11\nObjective:\nPerform GET transaction containing non-empty Token with a separate response (CON mode)\n\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 2.2, 5.2.2,  5.8.1\n\nPre-test\nconditions:\n\u2022\tServer offers a resource /separate which is not served immediately and which therefore is not acknowledged in a piggybacked way.\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a GET request to server\u2019s\nresource including Token option\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tLength of the token should be between 1 to 8 Bytes\n\u2022\tUri-Path option \"separate\"\n\n3\nCheck\nServer sends acknowledgement containing:\n\u2022\tType = 2 (ACK)\n\u2022\tCode = 0 (Empty)\n\u2022\tMessage ID = CMID\n\u2022\tempty Payload\n\n\n4\nCheck\nServer sends response containing:\n\u2022\tType  = 0 (CON)\n\u2022\tCode = 69 (2.05 content)\n\u2022\tServer-generated Message ID (\u2794 SMID)\n\u2022\tToken = CTOK\n\u2022\tNon-empty Payload\n\n5\nCheck\nClient sends acknowledgement containing:\n\u2022\tType = 2 (ACK)\n\u2022\tCode = 0 (Empty)\n\u2022\tMessage ID = SMID\n\u2022\tEmpty Payload\n\n\n6\nVerify\nClient displays the response\n\"\"\"\n\n    def run (self):\n        self.match_coap (\"client\", CoAP (\ttype=\"con\",\n                            code = \"get\",\n                            tok = Not (b\"\"),\n                            opt = self.uri (\"/separate\"),\n                ))\n        self.match_coap (\"client\", CoAP (tok = Length (bytes, (1, 8))\n                ), \"fail\")\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next()\n\n        # FIXME: may be out-of-order\n        if not self.match_coap\t(\"server\", CoAP (type=\"ack\", code=0, mid=CMID,pl=b\"\")):\n            raise self.Stop()\n\n        self.next()\n\n         # FIXME: this is in a different conversation\n        self.match_coap (\"server\", CoAP (type=\"con\", code=2.05))\n        self.match_coap (\"server\", CoAP (\n                        pl = Not (b''),\n                        tok= CTOK,\n                        )\n                , \"fail\")\n        SMID = self.frame.coap[\"mid\"]\n\n        self.next()\n\n        self.match_coap (\"client\", CoAP (type=\"ack\", code=0, mid=SMID,pl=b\"\"))\n"], ["TD_COAP_CORE_12", "Perform GET transaction using empty Token (CON mode)", "class TD_COAP_CORE_12(CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_12\nObjective:\nPerform GET transaction using empty Token (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 2.2 ,5.8.1, 5.10.1\n\nPre-test\nconditions:\n\u2022\tServer offers the resource /test with resource content is not empty that handles GET with an arbitrary payload\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a confirmable GET request using zero-length Token to server\u2019s resource\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tZero-Length Token \u2794 CTOK\n\u2022\tUri-Path option \"test\"\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tNot empty Payload\n\u2022\tContent format option\n\n4\nVerify\nClient displays the response\n\"\"\"\n\n    def run(self):\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"get\",\n                                       tok=b\"\",\n                                       opt=self.uri(\"/test\")))\n\n        self.next_skip_ack()\n\n        if self.match_coap(\"server\", CoAP(code=2.05,\n                                          pl=Not(b\"\"),\n                                          opt=Opt(CoAPOptionContentFormat()),\n                                          )):\n            self.match_coap(\"server\", CoAP(tok=b\"\"), \"fail\")\n"], ["TD_COAP_CORE_13", "Perform GET transaction containing several URI-Path options (CON mode)", "class TD_COAP_CORE_13 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_13\nObjective:\nPerform GET transaction containing several URI-Path options (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.4.5, 5.10.2,6.5\n\nPre-test\nconditions:\n\u2022\tServer offers a /seg1/seg2/seg3 resource with resource content is not empty\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a confirmable GET request to server\u2019s resource\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tUri-Path option \"test\"\n\nand three options of type Uri-Path, with the values:\n\n\u2022\tseg1\n\u2022\tseg2\n\u2022\tseg3\n\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tNot empty Payload\n\u2022\tContent format option\n\n4\nVerify\nClient displays the response\n\"\"\"\n    def run (self):\n        if self.urifilter:\n            uri_path_opt = self.uri (\"/seg1/seg2/seg3\")\n        else:\n            uri_path_opt = Opt(CoAPOptionUriPath(), superset=True)\n\n        self.match_coap (\"client\", CoAP (code = \"get\",\n                        type = \"con\",\n                        opt = uri_path_opt))\n\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n\n        opts = list (filter ((lambda o: isinstance (o, CoAPOptionUriPath)), self.frame.coap[\"opt\"]))\n\n        if len (opts) > 1:\n            self.setverdict (\"pass\", \"multiple UriPath options\")\n        else:\n            self.setverdict (\"inconc\", \"only one UriPath option\")\n\n        # TODO: move this checks outside the testcases\n        for o in opts:\n            if \"/\" in str (o[\"val\"]):\n                self.setverdict (\"fail\", \"option %s contains a '/'\" % repr (o))\n\n        self.next_skip_ack()\n\n        self.match_coap (\"server\", CoAP (\tcode = 2.05,\n                            type = Any (CoAPType(\"con\"), \"ack\"),\n                            mid=CMID,\n                            tok=CTOK,\n                            pl = Not (b\"\"),\n                            opt = Opt (CoAPOptionContentFormat()),\n                ))\n"], ["TD_COAP_CORE_14", "Perform GET transaction containing several URI-Query options (CON mode)", "class TD_COAP_CORE_14 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_14\nObjective:\nPerform GET transaction containing several URI-Query options (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.4.5, 5.10.2,6.5\n\nPre-test\nconditions:\n\u2022\tServer offers a /query resource with resource content is not empty\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a confirmable GET request with three Query parameters (e.g. ?first=1&second=2&third=3) to the server\u2019s resource\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tUri-Path option \"query\"\nand two options of Uri-Query, with values such as:\n\u2022\tfirst=1\n\u2022\tsecond=2\n\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tContent-format option\n\u2022\tNon-empty Payload\n\n4\nVerify\nClient displays the response\n\n\"\"\"\n    def run (self):\n        if self.urifilter:\n            uri_query_opt = self.uri (\"/query?first=1&second=2\")\n        else:\n            uri_query_opt = Opt(CoAPOptionUriQuery(), superset=True)\n\n        self.match_coap (\"client\", CoAP (code = \"get\",\n                        type = \"con\",\n                        opt = uri_query_opt))\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n\n        opts = list (filter ((lambda o: isinstance (o, CoAPOptionUriQuery)), self.frame.coap[\"opt\"]))\n\n        if len (opts) < 2:\n            self.setverdict (\"inconc\", \"expect multiple UriQuery options\")\n\n        self.next_skip_ack()\n\n        self.match_coap (\"server\", CoAP (\tcode = 2.05,\n                            mid=CMID,\n                            tok=CTOK,\n                            pl = Not (b\"\"),\n                            opt = Opt (CoAPOptionContentFormat()),\n                ))\n"], ["TD_COAP_CORE_17", "Perform GET transaction with a separate response (NON mode)", "class TD_COAP_CORE_17 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_17\nObjective:\nPerform GET transaction with a separate response (NON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 2.2, 5.2.2,  5.8.1\n\nPre-test\nconditions:\n\u2022\tServer offers a resource /separate which is not served immediately and which therefore is not acknowledged in a piggybacked way.\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a non-confirmable GET request to server\u2019s resource\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType = 1 (NON)\n\u2022\tCode = 1 (GET)\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tUri-Path option \"separate\"\n\n3\nCheck\nServer DOES NOT send response containing:\n\u2022\tType = 2 (ACK)\n\u2022\tSame message ID as in the request in step 2\n\u2022\tempty Payload\n\n\n4\nCheck\nServer sends response containing:\n\u2022\tType  = 1 (NON)\n\u2022\tCode = 69 (2.05 content)\n\u2022\tServer-generated Message ID (\u2794 SMID)\n\u2022\tContent-format option\n\u2022\tNon-empty Payload\n\n5\nVerify\nClient displays the response\n\"\"\"\n    def run (self):\n        self.match_coap (\"client\", CoAP (type=\"non\", code = \"get\",\n                    opt=self.uri(\"/separate\")))\n\n        self.next()\n\n        #FIXME: may be out-of-order\n        if self.frame.coap in CoAP (type=\"ack\"):\n            self.setverdict (\"fail\", \"server must no send any ack\")\n            self.next()\n\n        if self.match_coap (\"server\", CoAP (type=\"non\", code=2.05)):\n            self.match_coap (\"server\", CoAP (\n                        pl = Not (b''),\n                        opt= Opt(CoAPOptionContentFormat())\n                ), \"fail\")\n"], ["TD_COAP_CORE_18", "Perform POST transaction with responses containing several Location-Path options", "class TD_COAP_CORE_18 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_18\nObjective:\nPerform POST transaction with responses containing several Location-Path options\n(CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.8.1,5.10.8,5.9.1.1\n\nPre-test\nconditions:\n\u2022\tServer accepts creation of new resource on  /testand the created resource is\nlocated at  /location1/location2/location3 (resource does not exist yet)\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a confirmable POST request to\nserver\u2019s resource\n\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 2 (POST)\n\u2022\tAn arbitrary payload\n\u2022\tContent-format option\n\u2022\tUri-Path option \"test\"\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 65 (2.01 created)\nand three options of type Location-Path, with the values (none of which contains a \"/\"):\n\u2022\tlocation1\n\u2022\tlocation2\n\u2022\tlocation3\n\n\n\n4\nVerify\nClient displays the response\n\"\"\"\n    request_uri = \"/test\"\n\n    def run (self):\n        self.match_coap (\"client\", CoAP (type=\"con\", code = \"post\",pl=Not(b\"\"),\n                    opt=self.uri(\n                        self.request_uri,\n                        CoAPOptionContentFormat(),\n                    )))\n\n        self.next_skip_ack()\n\n        self.match_coap (\"server\", CoAP (code=2.01,\n                        opt=Opt(\n                            CoAPOptionLocationPath (\"location1\"),\n                            CoAPOptionLocationPath (\"location2\"),\n                            CoAPOptionLocationPath (\"location3\"),\n                )))\n\n        self.next_skip_ack (optional = True)\n"], ["TD_COAP_CORE_19", "Perform POST transaction with responses containing several Location-Query options", "class TD_COAP_CORE_19(CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_19\nObjective:\nPerform POST transaction with responses containing several Location-Query options\n(CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.8.1,5.10.8,5.9.1.1\n\nPre-test\nconditions:\n\u2022\tServer accepts creation of new resource on uri  /location-query, the location of\nthe created resource contains two query parameters ?first=1&second=2\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a confirmable POST request to\nserver\u2019s resource\n\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 2 (POST)\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tContent-format option\n\u2022\tEmpty or non-empty Payload\n\u2022\tUri-Path option \"location-query\"\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 65 (2.01 created)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tContent-format option if payload non-empty\n\u2022\tZero or more Location-path options\n\u2022\tEmpty or non-empty Payload\n\nand two options of type Location-Query, with the values (none of which contains a \"?\" or \"&\"):\n\n\u2022\tfirst=1\n\u2022\tsecond=2\n\n\n4\nVerify\nClient displays the response\n\"\"\"\n\n    def run(self):\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"post\",\n                                       opt=self.uri(\n                                           \"/location-query\",\n                                           CoAPOptionContentFormat(),\n                                       )))\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next_skip_ack()\n\n        self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                       code=2.01,\n                                       mid=CMID,\n                                       tok=CTOK,\n                                       opt=Opt(\n                                           CoAPOptionLocationQuery(\"first=1\"),\n                                           CoAPOptionLocationQuery(\"second=2\"),\n                                       )))\n        if self.match_coap(\"server\", CoAP(pl=Not(b\"\")), None):\n            self.match_coap(\"server\", CoAP(\n                opt=Opt(CoAPOptionContentFormat()),\n            ), \"fail\")\n        self.next_skip_ack(optional=True)\n"], ["TD_COAP_CORE_20", "Perform GET transaction containing the Accept option (CON mode)", "class TD_COAP_CORE_20(CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_20\nObjective:\nPerform GET transaction containing the Accept option (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] clause 5.8.1,5.10.5,5.10.4\n\nPre-test\nconditions:\n\u2022\tServer should provide a resource /multi-format which exists in two formats:\n-\ttext/plain;charset=utf-8\n-\tapplication/xml\n\nTest Sequence:\nStep\nType\nDescription\n\nPart A: client requests a resource in text format\n\n\n1\nStimulus\nClient is requested to send a confirmable GET request to\nserver\u2019s resource\n\n\n2\nCheck\nThe request sent request by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tOption type = Accept, value = 0 (text/plain;charset=utf-8)\n\u2022\tUri-Path option \"multi-format\"\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tOption type = Content-Format, value = 0 (text/plain;charset=utf-8)\n\u2022\tPayload = Content of the requested resource in text/plain;charset=utf-8 format\n\n4\nVerify\nClient displays the response\n\nPart B: client requests a resource in xml format\n\n5\nStimulus\nClient is requested to send a confirmable GET request to\nserver\u2019s resource\n\n\n6\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tAnother client-generated Message ID \u2260 CMID (\u2794 CMID2)\n\u2022\tClient-generated Token which may or may not be \u2260 CTOK (\u2794 CTOK2)\n\u2022\tOption type = Accept, value = 41 (application/xml)\n\n7\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tMessage ID = CMID2, Token = CTOK2\n\u2022\tOption type = Content-Format, value = 41 (application/xml)\nPayload = Content of the requested resource in application/xml format\n\n8\nVerify\nClient displays the response\n\"\"\"\n\n    def run(self):\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"get\",\n                                       opt=self.uri(\"/multi-format\") if self.urifilter else Opt(CoAPOptionAccept())))\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"get\",\n                                       opt=Opt(CoAPOptionAccept(0))))\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next_skip_ack()\n\n        self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                       code=2.05,\n                                       mid=CMID,\n                                       tok=CTOK,\n                                       opt=Opt(CoAPOptionContentFormat(0)),\n                                       pl=Not(b\"\")))\n\n        self.next_skip_ack(optional=True)\n\n        self.chain()\n\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"get\",\n                                       opt=self.uri(\"/multi-format\", CoAPOptionAccept(41))))\n        CMID2 = self.frame.coap[\"mid\"]\n        CTOK2 = self.frame.coap[\"tok\"]\n        if CMID2 is Not(b''):\n            if CMID2 == CMID:\n                self.setverdict(\"fail\", \"Message ID should be different\")\n        if CTOK2 is Not(b''):\n            if CTOK2 == CTOK:\n                self.setverdict(\"fail\", \"Token should be different\")\n\n        self.next_skip_ack()\n\n        self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                       code=2.05,\n                                       mid=CMID2,\n                                       tok=CTOK2,\n                                       opt=Opt(CoAPOptionContentFormat(41)),\n                                       pl=Not(b\"\")))\n\n        self.next_skip_ack(optional=True)\n"], ["TD_COAP_CORE_21", "Perform GET transaction containing the ETag option (CON mode)", "class TD_COAP_CORE_21(CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_21\nObjective:\nPerform GET transaction containing the ETag option (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.8.1, 5.10.7,5.10.10,12.1.12\n\nPre-test\nconditions:\n\u2022\tServer should offer a /validate resource which vary in time\n\u2022\tClient & server supports ETag option\n\u2022\tThe Client\u2018s cache must be purged\n\nTest Sequence:\nStep\nType\nDescription\n\nPart A: Verifying that client cache is empty\n\n1\nStimulus\nClient is requested to send a confirmable GET request to server\u2019s resource\n\n\n2\nCheck\nThe request sent request by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tUri-Path option \"validate\"\n\u2022\tNo ETag option\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tOption type = ETag, value = a value chosen by the server (\u2794 ETAG1)\n\u2022\tNon-empty Payload\n\n4\nVerify\nClient displays the response\n\nPart B: Verifying client cache entry is still valid\n\n5\nStimulus\nClient is requested to send s confirmable GET request to\nserver\u2019s resource so as to check if the resource was updated\n\n6\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tAnother client-generated Message ID \u2260 CMID (\u2794 CMID2)\n\u2022\tClient-generated Token which may or may not be \u2260 CTOK (\u2794 CTOK2)\n\u2022\tUri-Path option \"validate\"\n\u2022\tOption Type = ETag, value = ETAG1 (the ETag value received in step 3)\n\n7\nCheck\nServer sends response containing:\n\u2022\tCode = 67 (2.03 Valid)\n\u2022\tMessage ID = CMID2, Token = CTOK2\n\u2022\tOption type = ETag, value = ETAG1\n\u2022\tEmpty Payload\n\n\n8\nVerify\nClient displays the response\n\nPart C: Verifying that client cache entry is no longer valid\n\n9\nStimulus\nUpdate the content of the server\u2019s resource from a CoAP client (either another client, or the testing client in a separate transaction)\n\n10\nStimulus\nClient is requested to send a confirmable GET request to server\u2019s resource so as to check if the resource was updated\n\n11\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tAnother client-generated Message ID \u2260 CMID and \u2260 CMID2 (\u2794 CMID3)\n\u2022\tClient-generated Token which may or may not be \u2260 CTOK or CTOK2 (\u2794 CTOK3)\n\u2022\tUri-Path option \"validate\"\n\u2022\tOption Type = ETag, value = ETAG1 (the ETag value received in step 3)\n\n12\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 Content)\n\u2022\tMessage ID = CMID3, Token = CTOK3\n\u2022\tOption type = ETag, value = another ETag value \u2260 ETAG1\n\u2022\tThe payload of the requested resource, which should be different from the payload in step 3\n\n\n13\nVerify\nClient displays the response\n\"\"\"\n\n    def run(self):\n        # Part A\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"get\",\n                                       opt=All(\n                                           Opt(CoAPOptionUriPath(\"validate\")),\n                                           NoOpt(CoAPOptionETag()),\n                                       )))\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next_skip_ack()\n\n        if not self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                              code=2.05,\n                                              mid=CMID,\n                                              tok=CTOK,\n                                              opt=Opt(CoAPOptionETag()),\n                                              pl=Not(b\"\"))):\n            raise self.Stop()\n\n        ETAG1 = self.frame.coap[\"opt\"][CoAPOptionETag][\"val\"]\n        pl3 = self.frame.coap[\"pl\"]\n\n        self.next_skip_ack(optional=True)\n\n        # Part B\n        self.chain()\n\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"get\",\n                                       opt=Opt(\n                                           CoAPOptionUriPath(\"validate\"),\n                                           CoAPOptionETag(ETAG1),\n                                       )))\n        CMID2 = self.frame.coap[\"mid\"]\n        CTOK2 = self.frame.coap[\"tok\"]\n        if CMID2 is Not(b''):\n            if CMID2 == CMID:\n                self.setverdict(\"fail\", \"Message ID should be different\")\n        if CTOK2 is Not(b''):\n            if CTOK2 == CTOK:\n                self.setverdict(\"fail\", \"Token should be different\")\n\n        self.next_skip_ack()\n\n        self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                       code=2.03,\n                                       mid=CMID2,\n                                       tok=CTOK2,\n                                       opt=Opt(CoAPOptionETag(ETAG1)),\n                                       pl=b\"\"))\n\n        self.next_skip_ack(optional=True)\n\n        # Part C\n        self.chain()\n\n        if self.match_coap(\"client\", CoAP(code=\"put\"), None):\n            # allow an update from another client running on the same host\n            self.next_skip_ack()\n            self.match_coap(\"server\", CoAP(code=2.04))\n            self.next_skip_ack(optional=True)\n\n            self.chain()\n\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"get\",\n                                       opt=Opt(\n                                           CoAPOptionUriPath(\"validate\"),\n                                           CoAPOptionETag(ETAG1),\n                                       )))\n        CMID3 = self.frame.coap[\"mid\"]\n        CTOK3 = self.frame.coap[\"tok\"]\n        if CMID3 is Not(b''):\n            if CMID3 == CMID or CMID3 == CMID2:\n                self.setverdict(\"fail\", \"Message ID should be different\")\n        if CTOK3 is Not(b''):\n            if CTOK3 == CTOK or CTOK3 == CTOK2:\n                self.setverdict(\"fail\", \"Token should be different\")\n\n        self.next_skip_ack()\n\n        self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                       code=2.05,\n                                       mid=CMID3,\n                                       tok=CTOK3,\n                                       opt=Opt(CoAPOptionETag(Not(ETAG1))),\n                                       pl=All(Not(b\"\"), Not(pl3))))\n\n        self.next_skip_ack(optional=True)\n"], ["TD_COAP_CORE_22", "Perform GET transaction with responses containing the ETag option and requests", "class TD_COAP_CORE_22(CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_22\nObjective:\nPerform GET transaction with responses containing the ETag option and requests\ncontaining the If-Match option (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.8.1, 5.10.7,5.10.9,12.1.12\n\nPre-test\nconditions:\n\u2022\tServer offer a /validate resource\n\u2022\tClient & server supports ETag and If-Match option\n\u2022\tThe Client\u2018s cache must be purged\n\nTest Sequence:\nStep\nType\nDescription\nPreamble: client gets the resource\n\n\n1\nStimulus\nClient is requested to send a confirmable GET request to\nserver\u2019s resource\n\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tUri-Path option \"validate\"\n\u2022\tNo ETag option\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tOption type = ETag, value = a value chosen by the server (\u2794 ETAG1)\n\u2022\tNon-empty Payload\n\nPart A: single update\n\n4\nStimulus\nClient is requested to send a confirmable PUT request to\nserver\u2019s resource so as to perform an atomic update\n\n5\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 3 (PUT)\n\u2022\tAnother client-generated Message ID \u2260 CMID (\u2794 CMID2)\n\u2022\tClient-generated Token which may or may not be \u2260 CTOK (\u2794 CTOK2)\n\u2022\tContent-format option\n\u2022\tUri-Path option \"validate\"\n\u2022\tOption type = If-Match, value = ETAG1 (ETag value received in step 3)\n\u2022\tAn arbitrary payload (which differs from the payload received in step 3)\n\n6\nCheck\nServer sends response containing:\n\u2022\tCode = 68 (2.04 Changed)\n\u2022\tMessage ID = CMID2, Token = CTOK2\n\u2022\tContent-format option if payload non-empty\n\u2022\tEmpty or non-empty Payload\n\n7\nVerify\nClient displays the response and the server changed its\nresource\n\nPart B: concurrent updates\n\n\n8\nStimulus\nClient is requested to send a confirmable GET request to\nserver\u2019s resource\n\n9\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tAnother client-generated Message ID \u2260 CMID and \u2260 CMID2 (\u2794 CMID3)\n\u2022\tClient-generated Token which may or may not be \u2260 CTOK or CTOK2 (\u2794 CTOK3)\n\u2022\tUri-Path option \"validate\"\n\n10\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tMessage ID = CMID3, Token = CTOK3\n\u2022\tOption type = ETag, value = a value \u2260 ETAG1 chosen by the server (\u2794 ETAG2)\n\u2022\tThe Payload sent in step 5\n\n11\nVerify\nClient displays the response\n\n\n12\nStimulus\nUpdate the content of the server\u2019s resource from a CoAP client\n\n13\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 3 (PUT)\n\u2022\tAnother client-generated Message ID \u2260 CMID, CMID2, CMID3 (\u2794 CMID4)\n\u2022\tClient-generated Token which may or may not be \u2260 CTOK, CTOK2, CTOK3 (\u2794 CTOK4)\n\u2022\tContent-format option\n\u2022\tUri-Path option \"validate\"\n\u2022\tAn arbitrary payload (which differs from the payloads received in steps 3 and 10)\n\n14\nCheck\nServer sends response containing:\n\u2022\tCode = 2.04 (Changed)\n\u2022\tMessage ID = CMID4, Token = CTOK4\n\u2022\tContent-format option if payload non-empty\n\u2022\tEmpty or non-empty Payload\n\n15\nVerify\nClient displays the response and the server changed its resource\n\n16\nStimulus\nClient is requested to send a confirmable PUT request to server\u2019s resource so as to perform an atomic update, assuming it is still unchanged from step 10\n\n17\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 3 (PUT)\n\u2022\tAnother client-generated Message ID \u2260 CMID, CMID2, CMID3, CMID4 (\u2794 CMID5)\n\u2022\tClient-generated Token which may or may not be \u2260 CTOK, CTOK2, CTOK3, CTOK4 (\u2794 CTOK5)\n\u2022\tContent-format option\n\u2022\tUri-Path option \"validate\"\n\u2022\tOption type = If-Match, value = ETAG2 (ETag value received in step 10)\n\u2022\tAn arbitrary payload (which differs from the previous payloads)\n\n18\nCheck\nServer sends response containing:\n\u2022\tCode = 4.12 (Precondition Failed)\n\u2022\tMessage ID = CMID4, Token = CTOK4\n\u2022\tOptional Content-format option\n\u2022\tEmpty or non-empty Payload\n\n19\nVerify\nClient displays the response and the server did not update the content of the resource\n\"\"\"\n\n    def run(self):\n        # Preamble\n        # Step 2\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"get\",\n                                       opt=All(\n                                           Opt(CoAPOptionUriPath(\"validate\")),\n                                           NoOpt(CoAPOptionETag()),\n                                       )))\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next_skip_ack()\n\n        # Step 3\n        if not self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                              code=2.05,\n                                              mid=CMID,\n                                              tok=CTOK,\n                                              opt=Opt(CoAPOptionETag()),\n                                              pl=Not(b\"\"))):\n            raise self.Stop()\n\n        ETAG1 = self.frame.coap[\"opt\"][CoAPOptionETag][\"val\"]\n        pl_3 = self.frame.coap[\"pl\"]\n\n        self.next_skip_ack(optional=True)\n\n        # Part A\n        self.chain()\n        # Step 5\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"put\",\n                                       opt=Opt(\n                                           CoAPOptionContentFormat(),\n                                           CoAPOptionUriPath(\"validate\"),\n                                           CoAPOptionIfMatch(ETAG1),\n                                       ),\n                                       pl=All(Not(b\"\"), Not(pl_3))))\n        CMID2 = self.frame.coap[\"mid\"]\n        CTOK2 = self.frame.coap[\"tok\"]\n        if CMID2 is Not(b''):\n            if CMID2 == CMID:\n                self.setverdict(\"fail\", \"Message ID should be different\")\n        if CTOK2 is Not(b''):\n            if CTOK2 == CTOK:\n                self.setverdict(\"fail\", \"Token should be different\")\n        pl_5 = self.frame.coap[\"pl\"]\n        self.next_skip_ack()\n\n        # Step 6\n        if not self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                              code=2.04,\n                                              mid=CMID2,\n                                              tok=CTOK2)):\n            raise self.Stop()\n        if self.match_coap(\"server\", CoAP(pl=Not(b\"\")), None):\n            self.match_coap(\"server\", CoAP(\n                opt=Opt(CoAPOptionContentFormat()),\n            ), \"fail\")\n\n        self.next_skip_ack(optional=True)\n\n        # Part B\n\n        # Step 9\n        self.chain()\n\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"get\",\n                                       opt=Opt(CoAPOptionUriPath(\"validate\"))))\n        CMID3 = self.frame.coap[\"mid\"]\n        CTOK3 = self.frame.coap[\"tok\"]\n        if CMID3 is Not(b''):\n            if CMID3 == CMID or CMID3 == CMID2:\n                self.setverdict(\"fail\", \"Message ID should be different\")\n        if CTOK3 is Not(b''):\n            if CTOK3 == CTOK or CTOK3 == CTOK2:\n                self.setverdict(\"fail\", \"Token should be different\")\n\n        self.next_skip_ack()\n\n        # Step 10\n        if not self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                              code=2.05,\n                                              mid=CMID3,\n                                              tok=CTOK3,\n                                              opt=Opt(CoAPOptionETag(Not(ETAG1))),\n                                              pl=pl_5)):\n            raise self.Stop()\n\n        ETAG2 = self.frame.coap[\"opt\"][CoAPOptionETag][\"val\"]\n        pl_10 = self.frame.coap[\"pl\"]\n\n        self.next_skip_ack(optional=True)\n\n        self.chain()\n\n        # Step 13\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"put\",\n                                       opt=Opt(\n                                           CoAPOptionUriPath(\"validate\"),\n                                           CoAPOptionContentFormat(),\n                                       ),\n                                       pl=All(Not(b\"\"), Not(pl_3), Not(pl_10))))\n        CMID4 = self.frame.coap[\"mid\"]\n        CTOK4 = self.frame.coap[\"tok\"]\n        if CMID4 is Not(b''):\n            if CMID4 == CMID or CMID4 == CMID2 or CMID4 == CMID3:\n                self.setverdict(\"fail\", \"Message ID should be different\")\n        if CTOK4 is Not(b''):\n            if CTOK4 == CTOK or CTOK4 == CTOK2 or CTOK4 == CTOK3:\n                self.setverdict(\"fail\", \"Token should be different\")\n        pl_13 = self.frame.coap[\"pl\"]\n\n        self.next_skip_ack()\n\n        # Step 14\n        self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                       code=2.04,\n                                       mid=CMID4,\n                                       tok=CTOK4, ))\n        if self.match_coap(\"server\", CoAP(pl=Not(b\"\")), None):\n            self.match_coap(\"server\", CoAP(\n                opt=Opt(CoAPOptionContentFormat()),\n            ), \"fail\")\n\n        self.next_skip_ack(optional=True)\n\n        self.chain()\n\n        # Step 17\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"put\",\n                                       opt=Opt(\n                                           CoAPOptionContentFormat(),\n                                           CoAPOptionUriPath(\"validate\"),\n                                           CoAPOptionIfMatch(ETAG2),\n                                       ),\n                                       pl=All(Not(b\"\"), Not(pl_13))))\n        CMID5 = self.frame.coap[\"mid\"]\n        CTOK5 = self.frame.coap[\"tok\"]\n        if CMID5 is Not(b''):\n            if CMID5 == CMID or CMID5 == CMID2 or CMID5 == CMID3 or CMID5 == CMID4:\n                self.setverdict(\"fail\", \"Message ID should be different\")\n        if CTOK5 is Not(b''):\n            if CTOK5 == CTOK or CTOK5 == CTOK2 or CTOK5 == CTOK3 or CTOK5 == CTOK4:\n                self.setverdict(\"fail\", \"Token should be different\")\n\n        self.next_skip_ack()\n        # Step 18\n        self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                       code=4.12,\n                                       mid=CMID5,\n                                       tok=CTOK5, ))\n"], ["TD_COAP_CORE_23", "Perform PUT transaction containing the If-None-Match option (CON mode)", "class TD_COAP_CORE_23(CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_23\nObjective:\nPerform PUT transaction containing the If-None-Match option (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 5.8.1, 5.10.7,5.10.10,12.1.12\n\nPre-test\nconditions:\n\u2022\tServer should offer a /create1 resource, which does not exist and which can be created by the client\n\u2022\tClient & server supports If-Non-Match\n\n\nTest Sequence:\nStep\nType\nDescription\n\nPart A: single creation\n\n1\nStimulus\nClient is requested to send a confirmable PUT request to\nserver\u2019s resource so as to atomically create the resource.\n\n2\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 3 (PUT)\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tClient-generated Token (\u2794 CTOK)\n\u2022\tContent-format option\n\u2022\tUri-Path option \"create1\"\n\u2022\tOption Type=If-None-Match\n\u2022\tAn arbitrary payload\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 65 (2.01 Created)\n\u2022\tMessage ID = CMID, Token = CTOK\n\u2022\tContent-format option if payload non-empty\n\u2022\tEmpty or non-empty Payload\n\n\n4\nVerify\nClient displays the response and the server created a new resource\n\nPart B: concurrent creations\n\n5\nStimulus\nClient is requested to send a confirmable PUT request to\nserver\u2019s resource so as to atomically create the resource.\n\n6\nCheck\nThe request sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 3 (PUT)\n\u2022\tAnother client-generated Message ID \u2260 CMID (\u2794 CMID2)\n\u2022\tClient-generated Token which may or may not be \u2260 CTOK (\u2794 CTOK2)\n\u2022\tContent-format option\n\u2022\tUri-Path option \"create1\"\n\u2022\tOption Type=If-None-Match\n\u2022\tAn arbitrary payload\n\n7\nCheck\nServer sends response containing:\n\u2022\t140 (4.12 Precondition Failed)\n\u2022\tMessage ID = CMID2, Token = CTOK2\n\u2022\tOptional Content-format option\n\u2022\tEmpty or non-empty Payload\n\n\n8\nVerify\nClient displays the response\n\"\"\"\n    request_uri = \"/create1\"\n\n    def run(self):\n        # Part A\n\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"put\",\n                                       opt=Opt(\n                                           CoAPOptionContentFormat(),\n                                           CoAPOptionUriPath(self.request_uri[1:]),\n                                           CoAPOptionIfNoneMatch(),\n                                       ),\n                                       pl=Not(b\"\")))\n\n        CMID = self.frame.coap[\"mid\"]\n        CTOK = self.frame.coap[\"tok\"]\n\n        self.next_skip_ack()\n\n        if not self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                              code=2.01, mid=CMID, tok=CTOK)):\n            raise self.Stop()\n        if self.match_coap(\"server\", CoAP(pl=Not(b\"\")), None):\n            self.match_coap(\"server\", CoAP(\n                opt=Opt(CoAPOptionContentFormat()),\n            ), \"fail\")\n        self.next_skip_ack(optional=True)\n\n        # Part B\n        self.chain()\n\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"put\",\n                                       opt=Opt(\n                                           CoAPOptionContentFormat(),\n                                           CoAPOptionUriPath(self.request_uri[1:]),\n                                           CoAPOptionIfNoneMatch(),\n                                       ),\n                                       pl=Not(b\"\")))\n        CMID2 = self.frame.coap[\"mid\"]\n        CTOK2 = self.frame.coap[\"tok\"]\n        if CMID2 is Not(b''):\n            if CMID2 == CMID:\n                self.setverdict(\"fail\", \"Message ID should be different\")\n        if CTOK2 is Not(b''):\n            if CTOK2 == CTOK:\n                self.setverdict(\"fail\", \"Token should be different\")\n\n        self.next_skip_ack()\n\n        if not self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                              code=4.12,\n                                              mid=CMID2,\n                                              tok=CTOK2,\n                                              pl=b\"\")):\n            raise self.Stop()\n\n        self.next_skip_ack(optional=True)\n"], ["TD_COAP_CORE_24", "Perform POST transaction with responses containing several Location-Path options", "class TD_COAP_CORE_24(TD_COAP_CORE_18):\n    \"\"\"Identifier:\nTD_COAP_CORE_24\nObjective:\nPerform POST transaction with responses containing several Location-Path options\n(Reverse Proxy in CON mode)\nConfiguration:\nCoAP_CFG_03\nReferences:\n[1] clause 5.8.1,5.10.8,5.9.1.1, 8.2.2,8.2.1,10.2.2,11.2\n\nPre-test\nconditions:\n\u2022\tProxy is configured as a reverse-proxy for the server\n\u2022\tProxy\u2019s cache is cleared\n\u2022\tServer accepts creation of new resource on /create2 and the created resource is\nlocated at  /location1/location2/location3 (resource does not exist yet)\n\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a confirmable POST request to\nproxy\n\n2\nCheck\nThe POST sent by the client contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 2 (POST)\n\u2022\tAn arbitrary payload\n\u2022\tContent-format option\n\n\n3\nCheck\nThe Proxy forwards the POST request to server\u2019s resource\nand that it contains:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 2 (POST)\n\u2022\tAn arbitrary payload\n\u2022\tContent-format option\n\n4\nCheck\nServer sends a response to the proxy containing:\n\u2022\tCode = 65 (2.01 created)\n\u2022\tOption type = Location-Path  (one for each segment)\n\u2022\tOption values must contain \u201clocation1\u201d, \u201clocation2\u201d &\n\u201clocation3\u201d without contain any \u2018/\u2019\n\n\n5\nCheck/\nObserve that the Proxy forwards the response (in step 4) to\nclient and check that the forwarded response contains:\n\u2022\tCode = 65 (2.01 created)\n\u2022\tOption type = Location-Path  (one for each segment)\n\u2022\tOption values must contain \u201clocation1\u201d, \u201clocation2\u201d &\n\u201clocation3\u201d without contain any \u2018/\u2019\n\n6\nVerify\nClient displays the response\n\n7\nVerify\nClient interface returns the response\n\u2022\t2.01 created\n\u2022\tLocation: coap://proxy/location1/location2/location3\n\t\"\"\"\n    request_uri = \"/create2\"\n    reverse_proxy = True\n"], ["TD_COAP_CORE_25", "Perform POST transaction with  responses containing several Location- Query  option", "class TD_COAP_CORE_25 (TD_COAP_CORE_19):\n    \"\"\"Identifier:\nTD_COAP_CORE_25\nObjective:\nPerform POST transaction with  responses containing several Location- Query  option\n(Reverse proxy)\nConfiguration:\nCoAP_CFG_03\nReferences:\n[1] clause 5.8.1,5.10.8,5.9.1.1, 8.2.2,8.2.1,10.2.2,11.2\n\nPre-test\nconditions:\n\u2022   Proxy is configured as a reverse-proxy for the server\n\u2022   Proxy\u2019s cache is cleared\n\u2022   Server accepts creation of new resource on uri  /location-query, the location of\nthe created resource contains two query parameters ?first=1&second=2\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a confirmable POST request to\nproxy\n\n2\nCheck\nProxy receives the request from client  & forwards it to\nserver\u2019s resource\n\n\n3\nCheck\nForwarded request must contain:\n\u2022   Type = 0 (CON)\n\u2022   Code = 2 (POST)\n\u2022   An arbitrary payload\n\u2022   Content-format option\n\n4\nCheck\nServer sends response to proxy containing:\n\u2022\tCode = 65 (2.01 created)\n\u2022\tTwo options whose type is Location-Query\n\uf06e\tThe first option contains first=1\n\uf06e\tThe second option contains second=2\n\n5\nCheck\nProxy forwards the response to client\n\n6\nCheck\nClient displays  the message\n\n7\nVerify\nClient interface returns the response:\n\u2022\t2.01 created\n\u2022\tLocation: coap://proxy/?first=1&second=2\n\t\"\"\"\n    reverse_proxy = True\n"], ["TD_COAP_CORE_26", "Perform GET transaction containing the Accept option (CON mode", "class TD_COAP_CORE_26 (TD_COAP_CORE_20):\n\t\"\"\"Identifier:\nTD_COAP_CORE_26\nObjective:\nPerform GET transaction containing the Accept option (CON mode\nConfiguration:\nCoAP_CFG_03\nReferences:\n[1] clause 5.8.1,5.10.5,5.10.4, 8.2.2,8.2.1,10.2.2,11.2\n\nPre-test\nconditions:\n\u2022\tProxy is configured as a reverse-proxy for the server\n\u2022\tProxy\u2019s cache is cleared\n\u2022\tServer should provide a resource /multi-format which exists in two formats:\n-\ttext/plain;charset=utf-8\n-\tapplication/xml\n\nTest Sequence:\nStep\nType\nDescription\nPart A: client requests text format\n\n\n1\nStimulus\nClient is requested to send a confirmable GET request to\nproxy\n\n2\nCheck\nProxy receives the request from client  & forwards it to\nserver\u2019s resource\n\n\n3\nCheck\nForwarded request must contain:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\u2022\tOption: type = Accept, value = 0 (text/plain;charset=utf-8)\n\n4\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tOption: type = Content-Format, value = 0\n(text/plain;charset=utf-8)\n\u2022\tPayload = Content of the requested resource in\ntext/plain;charset=utf-8 format\n\n5\nCheck\nProxy forwards the response to client\n\n6\nVerify\nClient receives  & displays the response\n\n7\nCheck\nResponse contains:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tOption: type = Content-Format, value = 0\n(text/plain;charset=utf-8)\n\u2022\tPayload = Content of the requested resource in\ntext/plain;charset=utf-8 format\n\nPart B: client requests xml format\n\n8\nStimulus\nClient is requested to send a confirmable GET request to\nProxy\n\n9\nCheck\nProxy forwards the request to server\n\n10\nCheck\nSent request must contain:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\nOption: type = Accept, value = 41 (application/xml)\n\n11\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tOption: type = Content-Format, value = 41\n(application/xml)\nPayload = Content of the requested resource in\napplication/xml format\n\n12\nCheck\nProxy forwards the response to client\n\n13\nVerify\nClient receives & displays the response\n\n14\nCheck\nClient displays the response received:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tOption: type = Content-Format, value = 41\n(application/xml)\nPayload = Content of the requested resource in\napplication/xml format\n\t\"\"\"\n\treverse_proxy = True\n"], ["TD_COAP_CORE_27", "Perform GET transaction with responses containing the ETag option and requests", "class TD_COAP_CORE_27 (TD_COAP_CORE_22):\n\t\"\"\"Identifier:\nTD_COAP_CORE_27\nObjective:\nPerform GET transaction with responses containing the ETag option and requests\ncontaining the If-Match option (CON mode)\nConfiguration:\nCoAP_CFG_03\nReferences:\n[1] clause 5.8.1, 5.10.7,5.10.9,12.1.12, 8.2.2,8.2.1,10.2.2,11.2\n\nPre-test\nconditions:\n\u2022\tProxy is configured as a reverse-proxy for the server\n\u2022\tProxy\u2019s cache is cleared\n\u2022\tServer should offer a /validate resource with resource content is not empty\n\u2022\tClient & server supports ETag option and If-Match option\n\nTest Sequence:\nStep\nType\nDescription\nPreamble: client gets the resource\n\n\n1\nStimulus\nClient is requested to send a confirmable GET request to\nproxy\n\n2\nCheck\nProxy forwards the request to server\n\n\n3\nCheck\nForwarded request must contain:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\n4\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 content)\n\u2022\tOption type = ETag\n\u2022\tOption value = an arbitrary ETag value\n\u2022\tNot empty payload\n\n5\nCheck\nProxy forwards the response to client\nPart A: single update\n\n6\nStimulus\nClient is requested to send a confirmable PUT request to\nProxy\n\n7\nCheck\nSent request must contain:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 3 (PUT)\n\u2022\tOption Type=If-Match\n\u2022\tOption value=ETag value received in step 4\n\u2022\tAn arbitrary payload (which differs from the payload\nreceived in step 3)\n\n8\nVerify\nProxy forwards the request to servers resource & server\nupdates the resource\n\n\n9\nCheck\nServer sends response containing:\n\u2022\tCode = 68 (2.04 Changed)\n\u2022\tOption type = ETag\n\u2022\tOption value = an arbitrary ETag value which differs from\nthe ETag received in step 4\n\n\n10\nCheck\nProxy forwards the response to client\n\n11\nCheck\nForwarded response contains:\n\u2022\tCode = 68 (2.04 Changed)\n\u2022\tOption type = ETag\n\u2022\tOption value = same ETag value found in step 8\n\n\n12\nVerify\nClient displays the response\nPart B: concurrent updates\n\n13\nStimulus\nUpdate the content of the server\u2019s resource from a CoAP\nclient\n\n14\nStimulus\nClient is requested to send s confirmable PUT request to\nproxy so as to perform an atomic update\n\n15\nCheck\nSent request must contain:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 3 (PUT)\n\u2022\tOption Type=If-Match\n\u2022\tOption value=ETag value received in step 8\nAn arbitrary payload (which differs from the previous\npayloads)\n\n16\nCheck\nProxy forwards the request to server\u2019s resource\n\n17\nCheck\nSent request must contain:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 3 (PUT)\n\u2022\tOption Type=If-Match\n\u2022\tOption value=same ETag value found in step 14\nAn arbitrary payload (which differs from the previous\npayloads)\n\n18\nCheck\nServer sends response containing:\n\u2022\tCode = 140 (4.12 Precondition Failed)\n\n\n19\nVerify\nProxy forwards the response to client\n\n20\nCheck\nResponse contains:\nCode = 140 (4.12 Precondition Failed)\n\n21\nVerify\nClient displays the response\n\t\"\"\"\n\treverse_proxy = True\n"], ["TD_COAP_CORE_28", "Perform GET transaction with responses containing the ETag option and requests", "class TD_COAP_CORE_28 (TD_COAP_CORE_23):\n\t\"\"\"Identifier:\nTD_COAP_CORE_28\nObjective:\nPerform GET transaction with responses containing the ETag option and requests\ncontaining the If-None-Match option (CON mode) (Reverse proxy)\nConfiguration:\nCoAP_CFG_03\nReferences:\n[1] clause 5.8.1, 5.10.7,5.10.10,12.1.12, 8.2.2,8.2.1,10.2.2,11.2\n\nPre-test\nconditions:\n\u2022\t Proxy is configured as a reverse-proxy for the server\n\u2022\tProxy\u2019s cache is cleared\n\u2022\tServer should offer a /create3 resource, which does not exist and which can be\ncreated by the client\n\u2022\tClient & server supports If-None-Match\n\n\nTest Sequence:\nStep\nType\nDescription\nPart A: single creation\n\n\n1\nStimulus\nClient is requested to send a confirmable PUT request to\nproxy to atomically create resource in server\n\n2\nCheck\nProxy forwards the request to server\n\n\n3\nCheck\nForwarded t request must contain:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 3 (PUT)\n\u2022\tOption Type=If-None-Match\n\u2022\tAn arbitrary payload\n\n4\nCheck\nServer sends response containing:\n\u2022\tCode = 65 (2.01 Created)\n\n\n5\nCheck\nProxy forwards the response to client\n\n6\nVerify\nClient displays the response & and server created new\nresource\nPart B: concurrent creations\n\n\n5\nStimulus\nClient is requested to send s confirmable PUT request to\nproxy to atomically create resource in server\n\n6\nCheck\nSent request must contain:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 3 (PUT)\n\u2022\tOption Type=If-Non-Match\n\u2022\tOption value=Received ETag value\n\n7\nCheck\nServer sends response containing:\n\u2022\t140 (4.12 Precondition Failed)\n\n8\nVerify\nProxy forwards the response to client\n\n9\nCheck\nResponse contains:\n\u2022  140 (4.12 Precondition Failed)\n\n10\nVerify\nClient displays the response\n\t\"\"\"\n\trequest_uri = \"/create3\"\n\treverse_proxy = True\n"], ["TD_COAP_CORE_29", "Perform GET transaction with responses containing the Max-Age option (Reverse", "class TD_COAP_CORE_29(CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_29\nObjective:\nPerform GET transaction with responses containing the Max-Age option (Reverse\nproxy)\nConfiguration:\nCoAP_CFG_03\nReferences:\n[1] clause 5.8.1,5.10.6,5.9.1.3,5.9.1.5, 8.2.2,8.2.1,10.2.2,11.2\n\nPre-test\nconditions:\n\u2022\tProxy offers a cache\n\u2022\tProxy is configured as a reverse-proxy for the server\n\u2022\tServers resource vary in time and supports Max-Age option\n\u2022\tProxy\u2019s cache is cleared\n\u2022\tServer offers a resource /validate that varies in time, with a Max-Age set to 30s\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nA confirmable GET request is sent to Proxy from Client\n\n\n2\nCheck\nProxy Sends request containing:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 1 (GET)\n\n\n3\nCheck\nServer sends response containing:\n\u2022\tCode = 69 (2.05 Content)\n\u2022\tOption type = ETag\n\u2022\tOption value = ETag value\n\u2022\tOption type = Max-age\n\u2022\tOption value\n\u2022\tNot empty Payload\n\n\n4\nVerify\nProxy forwards response to client\n\n5\nStimulus\nA confirmable GET request is sent to proxy from Client before\nMax-Age expires\n\n6\nCheck\nProxy dos not forward any request to the server\n\n7\nCheck\nProxy sends response to client\n\n8\nVerify\nResponse contains:\n\u2022\tOption type = Max-age\n\u2022\tOption Value = new Max-age\n\u2022\tPayload cached\n\t\"\"\"\n    reverse_proxy = True\n\n    def run(self):\n        # Step 2\n        self.match_coap(\"client\", CoAP(type=\"con\", code=\"get\",\n                                       opt=All(\n                                           Opt(CoAPOptionUriPath(\"validate\")),\n                                           NoOpt(CoAPOptionETag()),\n                                       )))\n\n        self.next_skip_ack()\n\n        if not self.match_coap(\"server\", CoAP(type=Any(CoAPType(\"con\"), \"ack\"),\n                                              code=2.05,\n                                              opt=Opt(CoAPOptionETag(), CoAPOptionMaxAge()),\n                                              pl=Not(b\"\"))):\n            raise self.Stop()\n\n        maxage = self.frame.coap[\"opt\"][CoAPOptionMaxAge][\"val\"]\n\n        ts = self.frame.ts\n\n        self.next_skip_ack(optional=True)\n\n        while self.chain(optional=True):\n            interval = self.frame.ts - ts\n\n            if interval >= maxage:\n                break\n\n            if self.match_coap(\"client\", CoAP(type=\"con\", code=\"get\",\n                                              opt=Opt(CoAPOptionUriPath(\"validate\"))),\n                               None):\n                raise self.setverdict(\"inconc\",\n                                      \"Proxy sent a new GET request after %.1f seconds whereas Max-Age is set to %d seconds\" % (\n                                      interval, maxage))\n                raise self.Stop()\n\n            while self.next(optional=True):\n                pass\n\n        self.setverdict(\"pass\", \"No further GET requests were observed within Max-Age (%d) seconds\" % maxage)\n"], ["TD_COAP_CORE_31", "Perform CoAP Ping (CON mode)", "class TD_COAP_CORE_31 (CoAPTestcase):\n    \"\"\"Identifier:\nTD_COAP_CORE_31\nObjective:\nPerform CoAP Ping (CON mode)\nConfiguration:\nCoAP_CFG_BASIC\nReferences:\n[COAP] 4.3\n\nPre-test\nconditions:\n(Should work with any CoAP server)\n\nTest Sequence:\nStep\nType\nDescription\n\n1\nStimulus\nClient is requested to send a \"Ping\" request with:\n\u2022\tType = 0 (CON)\n\u2022\tCode = 0 (empty)\n\n2\nCheck\nThe request sent by the client is four bytes and contains:\n\u2022\tType=0 and Code=0\n\u2022\tClient-generated Message ID (\u2794 CMID)\n\u2022\tZero-length Token\n\u2022\tNo payload\n\n3\nCheck\nServer sends four-byte RST response containing:\n\u2022\tType=3 and Code=0\n\u2022\tMessage ID = CMID\n\u2022\tZero-length Token\n\u2022\tNo payload\n\n4\nVerify \tClient displays that the \"Ping\" was successful\n    \"\"\"\n\n    def run (self):\n        self.match_coap (\"client\", CoAP (type=\"con\", code = 0,tok=b\"\",pl=b\"\"))\n        CMID = self.frame.coap[\"mid\"]\n\n        self.next_skip_ack()\n\n        if self.match_coap (\"server\", CoAP (type=3)):\n            self.match_coap (\"server\", CoAP (\n                        code=0,\n                        tok=b\"\",\n                        pl=b\"\",\n                    ), \"fail\")\n"]]